---
- name: Install LLM Worker using Docker, setup NFS mount, and install NVIDIA Container Toolkit
  hosts: all
  become: true
  vars:
    efs_ip: "172.32.1.124"
    share_path: "/share"
    llm_data: "/share/llm"
    llm_tmp: "/share/tmp"
    docker_compose_dir: "/opt/llm"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      tags: [always]

    - name: Install necessary packages
      apt:
        name: 
          - nfs-common
          - docker.io
          - gpg
          - curl
        state: present
      tags: [packages]

    # NFS Setup
    - name: Create share directory
      file:
        path: "{{ share_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags: [nfs]

    - name: Check if NFS is already mounted
      shell: mount | grep -q '{{ efs_ip }}:/'
      register: nfs_mounted
      ignore_errors: true
      changed_when: false
      tags: [nfs]

    - name: Mount NFS
      mount:
        src: "{{ efs_ip }}:/"
        path: "{{ share_path }}"
        fstype: nfs4
        opts: defaults,_netdev
        state: mounted
      when: nfs_mounted.rc != 0
      tags: [nfs]

    - name: Add mount entry to /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: "{{ efs_ip }}:/ {{ share_path }} nfs4 defaults,_netdev 0 0"
        state: present
      tags: [nfs]

    - name: Ensure NFS mount is accessible
      file:
        path: "{{ share_path }}"
        state: directory
        mode: '0755'
      tags: [nfs]

    # NVIDIA Container Toolkit Installation
    # - name: Remove existing NVIDIA Container Toolkit GPG key
    #   file:
    #     path: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
    #     state: absent
    #   tags: [nvidia, nvidia_cleanup]

    # - name: Remove existing NVIDIA Container Toolkit repository
    #   file:
    #     path: /etc/apt/sources.list.d/nvidia-container-toolkit.list
    #     state: absent
    #   tags: [nvidia, nvidia_cleanup]

    # - name: Add NVIDIA Container Toolkit GPG key
    #   shell: curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey \ | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
    #   tags: [nvidia]

    # - name: Add NVIDIA Container Toolkit repository
    #   shell: curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list \ | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' \ | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
    #   tags: [nvidia]

    # - name: Update apt cache
    #   shell: sudo apt-get update
    #   tags: [nvidia]

    # - name: Install NVIDIA Container Toolkit
    #   become: true
    #   shell: sudo apt-get install -y nvidia-container-toolkit
    #   tags: [nvidia]

    # Docker and llm setup tasks
    - name: Create Docker CLI plugins directory
      file:
        path: /root/.docker/cli-plugins
        state: directory
        mode: '0755'
      tags: [docker]

    - name: Download Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64"
        dest: /root/.docker/cli-plugins/docker-compose
        mode: '0755'
      tags: [docker]

    - name: Create Docker Compose directory
      file:
        path: "{{ docker_compose_dir }}"
        state: directory
        mode: '0755'
      tags: [docker]

    - name: Create Docker Compose LLM file
      copy:
        content: |
          version: "3.8"
          services:
            llm:
              image: ollama/ollama:latest
              container_name: llm
              restart: always
              ports:
                - "11434:11434"
              volumes:
                - {{ llm_data }}:/root/.ollama
                - {{ llm_data }}:/tmp
              environment:
                - OLLAMA_CONFIG=/var/lib/ollama/config.yaml
        dest: "{{ docker_compose_dir }}/docker-compose.yml"
        mode: '0644'
      tags: [docker]

    - name: Ensure Docker service is started and enabled
      systemd:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: Run Docker Compose
      command: docker compose up -d
      args:
        chdir: "{{ docker_compose_dir }}"
      tags: [docker]

  handlers:
    - name: Restart Docker
      systemd:
        name: docker
        state: restarted